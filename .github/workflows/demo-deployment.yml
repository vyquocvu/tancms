name: Demo Deployment Workflow

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'public/**'
      - 'prisma/**'
      - 'package*.json'
      - '.github/workflows/demo-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'public/**'
      - 'prisma/**'
      - 'package*.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - demo
          - production

env:
  NODE_VERSION: '18'
  
jobs:
  # Lint and test the code
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true # Don't fail on lint errors for demo

      - name: Run tests
        run: npm run test --run
        continue-on-error: true # Don't fail on test errors for demo

      - name: Generate Prisma client
        run: npm run db:generate

  # Build and deploy demo
  demo-deployment:
    name: Deploy Demo Environment
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'demo' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup demo environment
        run: |
          echo "Setting up demo environment..."
          cp .env.example .env
          echo "DATABASE_URL=file:./demo.db" >> .env
          echo "AUTH_SECRET=${{ secrets.DEMO_AUTH_SECRET || 'demo-secret-key-32-chars-minimum-length' }}" >> .env
          echo "APP_URL=${{ secrets.DEMO_APP_URL || 'https://demo.tancms.dev' }}" >> .env

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run database migrations
        run: npm run db:migrate

      - name: Seed demo data
        run: npm run db:seed

      - name: Build application
        run: npm run build

      - name: Run demo workflow
        run: |
          echo "Executing demo workflow..."
          npm run demo:workflow

      # If deploying to Vercel (can be customized for other platforms)
      - name: Deploy to Vercel
        if: github.event.inputs.environment == 'demo' || github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: './'

  # Create demo documentation
  demo-documentation:
    name: Generate Demo Documentation
    runs-on: ubuntu-latest
    needs: demo-deployment
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate demo report
        run: |
          echo "# Demo Deployment Report" > demo-report.md
          echo "" >> demo-report.md
          echo "**Deployment Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> demo-report.md
          echo "**Commit:** ${{ github.sha }}" >> demo-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> demo-report.md
          echo "**Environment:** ${{ github.event.inputs.environment || 'demo' }}" >> demo-report.md
          echo "" >> demo-report.md
          echo "## Demo Features Included" >> demo-report.md
          echo "- ‚úÖ Content Management System" >> demo-report.md
          echo "- ‚úÖ Admin Dashboard" >> demo-report.md
          echo "- ‚úÖ Analytics Demo" >> demo-report.md
          echo "- ‚úÖ Database Examples Workflow" >> demo-report.md
          echo "- ‚úÖ Sample Data and Content" >> demo-report.md
          echo "" >> demo-report.md
          echo "## Access Information" >> demo-report.md
          echo "- **Demo URL:** ${{ secrets.DEMO_APP_URL || 'https://demo.tancms.dev' }}" >> demo-report.md
          echo "- **Admin Panel:** ${{ secrets.DEMO_APP_URL || 'https://demo.tancms.dev' }}/admin" >> demo-report.md
          echo "- **Default Credentials:** admin@tancms.dev / admin123" >> demo-report.md

      - name: Upload demo report
        uses: actions/upload-artifact@v4
        with:
          name: demo-deployment-report
          path: demo-report.md
          retention-days: 30

  # Notify about deployment
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [demo-deployment, demo-documentation]
    if: always()
    
    steps:
      - name: Demo deployment status
        run: |
          if [ "${{ needs.demo-deployment.result }}" == "success" ]; then
            echo "‚úÖ Demo deployment completed successfully!"
            echo "üîó Demo URL: ${{ secrets.DEMO_APP_URL || 'https://demo.tancms.dev' }}"
            echo "üë§ Admin access: ${{ secrets.DEMO_APP_URL || 'https://demo.tancms.dev' }}/admin"
          else
            echo "‚ùå Demo deployment failed!"
            echo "Please check the logs for details."
          fi